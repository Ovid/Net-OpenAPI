package Net::OpenAPI::App::Exceptions;

# ABSTRACT: Easily thrown HTTP exceptions

# warning: this code is auto-generated by tools/regenerate_http_exception_classes.pl
# manual changes here will be lost
use Net::OpenAPI::Policy;
use base 'Exporter';
our @EXPORT_OK = qw(throw);

use Net::OpenAPI::Exceptions::HTTP::HTTPVersionNotSupported;
use Net::OpenAPI::Exceptions::HTTP::NotExtended;
use Net::OpenAPI::Exceptions::HTTP::VariantAlsoNegotiates;
use Net::OpenAPI::Exceptions::HTTP::ConnectionClosedWithoutResponse;
use Net::OpenAPI::Exceptions::HTTP::PreconditionRequired;
use Net::OpenAPI::Exceptions::HTTP::LengthRequired;
use Net::OpenAPI::Exceptions::HTTP::RequestHeaderFieldsTooLarge;
use Net::OpenAPI::Exceptions::HTTP::BadRequest;
use Net::OpenAPI::Exceptions::HTTP::BadGateway;
use Net::OpenAPI::Exceptions::HTTP::UnprocessableEntity;
use Net::OpenAPI::Exceptions::HTTP::LoopDetected;
use Net::OpenAPI::Exceptions::HTTP::InsufficientStorage;
use Net::OpenAPI::Exceptions::HTTP::NotModified;
use Net::OpenAPI::Exceptions::HTTP::NetworkAuthenticationRequired;
use Net::OpenAPI::Exceptions::HTTP::Locked;
use Net::OpenAPI::Exceptions::HTTP::UnavailableForLegalReasons;
use Net::OpenAPI::Exceptions::HTTP::ClientClosedRequest;
use Net::OpenAPI::Exceptions::HTTP::PermanentRedirect;
use Net::OpenAPI::Exceptions::HTTP::UnsupportedMediaType;
use Net::OpenAPI::Exceptions::HTTP::UseProxy;
use Net::OpenAPI::Exceptions::HTTP::RequestURITooLong;
use Net::OpenAPI::Exceptions::HTTP::ServiceUnavailable;
use Net::OpenAPI::Exceptions::HTTP::MultipleChoices;
use Net::OpenAPI::Exceptions::HTTP::UpgradeRequired;
use Net::OpenAPI::Exceptions::HTTP::ExpectationFailed;
use Net::OpenAPI::Exceptions::HTTP::MethodNotAllowed;
use Net::OpenAPI::Exceptions::HTTP::MisdirectedRequest;
use Net::OpenAPI::Exceptions::HTTP::ProxyAuthenticationRequired;
use Net::OpenAPI::Exceptions::HTTP::Found;
use Net::OpenAPI::Exceptions::HTTP::Gone;
use Net::OpenAPI::Exceptions::HTTP::NotImplemented;
use Net::OpenAPI::Exceptions::HTTP::SeeOther;
use Net::OpenAPI::Exceptions::HTTP::PreconditionFailed;
use Net::OpenAPI::Exceptions::HTTP::MovedPermanently;
use Net::OpenAPI::Exceptions::HTTP::RequestedRangeNotSatisfiable;
use Net::OpenAPI::Exceptions::HTTP::TemporaryRedirect;
use Net::OpenAPI::Exceptions::HTTP::PaymentRequired;
use Net::OpenAPI::Exceptions::HTTP::NotFound;
use Net::OpenAPI::Exceptions::HTTP::TooManyRequests;
use Net::OpenAPI::Exceptions::HTTP::PayloadTooLarge;
use Net::OpenAPI::Exceptions::HTTP::InternalServerError;
use Net::OpenAPI::Exceptions::HTTP::NetworkConnectTimeoutError;
use Net::OpenAPI::Exceptions::HTTP::FailedDependency;
use Net::OpenAPI::Exceptions::HTTP::NotAcceptable;
use Net::OpenAPI::Exceptions::HTTP::Forbidden;
use Net::OpenAPI::Exceptions::HTTP::Unauthorized;
use Net::OpenAPI::Exceptions::HTTP::Conflict;
use Net::OpenAPI::Exceptions::HTTP::RequestTimeout;
use Net::OpenAPI::Exceptions::HTTP::GatewayTimeout;

my %EXCEPTION_FOR_CODE = (
    300 => 'Net::OpenAPI::Exceptions::HTTP::MultipleChoices',
    301 => 'Net::OpenAPI::Exceptions::HTTP::MovedPermanently',
    302 => 'Net::OpenAPI::Exceptions::HTTP::Found',
    303 => 'Net::OpenAPI::Exceptions::HTTP::SeeOther',
    304 => 'Net::OpenAPI::Exceptions::HTTP::NotModified',
    305 => 'Net::OpenAPI::Exceptions::HTTP::UseProxy',
    307 => 'Net::OpenAPI::Exceptions::HTTP::TemporaryRedirect',
    308 => 'Net::OpenAPI::Exceptions::HTTP::PermanentRedirect',
    400 => 'Net::OpenAPI::Exceptions::HTTP::BadRequest',
    401 => 'Net::OpenAPI::Exceptions::HTTP::Unauthorized',
    402 => 'Net::OpenAPI::Exceptions::HTTP::PaymentRequired',
    403 => 'Net::OpenAPI::Exceptions::HTTP::Forbidden',
    404 => 'Net::OpenAPI::Exceptions::HTTP::NotFound',
    405 => 'Net::OpenAPI::Exceptions::HTTP::MethodNotAllowed',
    406 => 'Net::OpenAPI::Exceptions::HTTP::NotAcceptable',
    407 => 'Net::OpenAPI::Exceptions::HTTP::ProxyAuthenticationRequired',
    408 => 'Net::OpenAPI::Exceptions::HTTP::RequestTimeout',
    409 => 'Net::OpenAPI::Exceptions::HTTP::Conflict',
    410 => 'Net::OpenAPI::Exceptions::HTTP::Gone',
    411 => 'Net::OpenAPI::Exceptions::HTTP::LengthRequired',
    412 => 'Net::OpenAPI::Exceptions::HTTP::PreconditionFailed',
    413 => 'Net::OpenAPI::Exceptions::HTTP::PayloadTooLarge',
    414 => 'Net::OpenAPI::Exceptions::HTTP::RequestURITooLong',
    415 => 'Net::OpenAPI::Exceptions::HTTP::UnsupportedMediaType',
    416 => 'Net::OpenAPI::Exceptions::HTTP::RequestedRangeNotSatisfiable',
    417 => 'Net::OpenAPI::Exceptions::HTTP::ExpectationFailed',
    421 => 'Net::OpenAPI::Exceptions::HTTP::MisdirectedRequest',
    422 => 'Net::OpenAPI::Exceptions::HTTP::UnprocessableEntity',
    423 => 'Net::OpenAPI::Exceptions::HTTP::Locked',
    424 => 'Net::OpenAPI::Exceptions::HTTP::FailedDependency',
    426 => 'Net::OpenAPI::Exceptions::HTTP::UpgradeRequired',
    428 => 'Net::OpenAPI::Exceptions::HTTP::PreconditionRequired',
    429 => 'Net::OpenAPI::Exceptions::HTTP::TooManyRequests',
    431 => 'Net::OpenAPI::Exceptions::HTTP::RequestHeaderFieldsTooLarge',
    444 => 'Net::OpenAPI::Exceptions::HTTP::ConnectionClosedWithoutResponse',
    451 => 'Net::OpenAPI::Exceptions::HTTP::UnavailableForLegalReasons',
    499 => 'Net::OpenAPI::Exceptions::HTTP::ClientClosedRequest',
    500 => 'Net::OpenAPI::Exceptions::HTTP::InternalServerError',
    501 => 'Net::OpenAPI::Exceptions::HTTP::NotImplemented',
    502 => 'Net::OpenAPI::Exceptions::HTTP::BadGateway',
    503 => 'Net::OpenAPI::Exceptions::HTTP::ServiceUnavailable',
    504 => 'Net::OpenAPI::Exceptions::HTTP::GatewayTimeout',
    505 => 'Net::OpenAPI::Exceptions::HTTP::HTTPVersionNotSupported',
    506 => 'Net::OpenAPI::Exceptions::HTTP::VariantAlsoNegotiates',
    507 => 'Net::OpenAPI::Exceptions::HTTP::InsufficientStorage',
    508 => 'Net::OpenAPI::Exceptions::HTTP::LoopDetected',
    510 => 'Net::OpenAPI::Exceptions::HTTP::NotExtended',
    511 => 'Net::OpenAPI::Exceptions::HTTP::NetworkAuthenticationRequired',
    599 => 'Net::OpenAPI::Exceptions::HTTP::NetworkConnectTimeoutError'
);

my %EXCEPTION_FOR_SHORT_NAME = (
    BadGateway                      => 'Net::OpenAPI::Exceptions::HTTP::BadGateway',
    BadRequest                      => 'Net::OpenAPI::Exceptions::HTTP::BadRequest',
    ClientClosedRequest             => 'Net::OpenAPI::Exceptions::HTTP::ClientClosedRequest',
    Conflict                        => 'Net::OpenAPI::Exceptions::HTTP::Conflict',
    ConnectionClosedWithoutResponse => 'Net::OpenAPI::Exceptions::HTTP::ConnectionClosedWithoutResponse',
    ExpectationFailed               => 'Net::OpenAPI::Exceptions::HTTP::ExpectationFailed',
    FailedDependency                => 'Net::OpenAPI::Exceptions::HTTP::FailedDependency',
    Forbidden                       => 'Net::OpenAPI::Exceptions::HTTP::Forbidden',
    Found                           => 'Net::OpenAPI::Exceptions::HTTP::Found',
    GatewayTimeout                  => 'Net::OpenAPI::Exceptions::HTTP::GatewayTimeout',
    Gone                            => 'Net::OpenAPI::Exceptions::HTTP::Gone',
    HTTPVersionNotSupported         => 'Net::OpenAPI::Exceptions::HTTP::HTTPVersionNotSupported',
    InsufficientStorage             => 'Net::OpenAPI::Exceptions::HTTP::InsufficientStorage',
    InternalServerError             => 'Net::OpenAPI::Exceptions::HTTP::InternalServerError',
    LengthRequired                  => 'Net::OpenAPI::Exceptions::HTTP::LengthRequired',
    Locked                          => 'Net::OpenAPI::Exceptions::HTTP::Locked',
    LoopDetected                    => 'Net::OpenAPI::Exceptions::HTTP::LoopDetected',
    MethodNotAllowed                => 'Net::OpenAPI::Exceptions::HTTP::MethodNotAllowed',
    MisdirectedRequest              => 'Net::OpenAPI::Exceptions::HTTP::MisdirectedRequest',
    MovedPermanently                => 'Net::OpenAPI::Exceptions::HTTP::MovedPermanently',
    MultipleChoices                 => 'Net::OpenAPI::Exceptions::HTTP::MultipleChoices',
    NetworkAuthenticationRequired   => 'Net::OpenAPI::Exceptions::HTTP::NetworkAuthenticationRequired',
    NetworkConnectTimeoutError      => 'Net::OpenAPI::Exceptions::HTTP::NetworkConnectTimeoutError',
    NotAcceptable                   => 'Net::OpenAPI::Exceptions::HTTP::NotAcceptable',
    NotExtended                     => 'Net::OpenAPI::Exceptions::HTTP::NotExtended',
    NotFound                        => 'Net::OpenAPI::Exceptions::HTTP::NotFound',
    NotImplemented                  => 'Net::OpenAPI::Exceptions::HTTP::NotImplemented',
    NotModified                     => 'Net::OpenAPI::Exceptions::HTTP::NotModified',
    PayloadTooLarge                 => 'Net::OpenAPI::Exceptions::HTTP::PayloadTooLarge',
    PaymentRequired                 => 'Net::OpenAPI::Exceptions::HTTP::PaymentRequired',
    PermanentRedirect               => 'Net::OpenAPI::Exceptions::HTTP::PermanentRedirect',
    PreconditionFailed              => 'Net::OpenAPI::Exceptions::HTTP::PreconditionFailed',
    PreconditionRequired            => 'Net::OpenAPI::Exceptions::HTTP::PreconditionRequired',
    ProxyAuthenticationRequired     => 'Net::OpenAPI::Exceptions::HTTP::ProxyAuthenticationRequired',
    RequestHeaderFieldsTooLarge     => 'Net::OpenAPI::Exceptions::HTTP::RequestHeaderFieldsTooLarge',
    RequestTimeout                  => 'Net::OpenAPI::Exceptions::HTTP::RequestTimeout',
    RequestURITooLong               => 'Net::OpenAPI::Exceptions::HTTP::RequestURITooLong',
    RequestedRangeNotSatisfiable    => 'Net::OpenAPI::Exceptions::HTTP::RequestedRangeNotSatisfiable',
    SeeOther                        => 'Net::OpenAPI::Exceptions::HTTP::SeeOther',
    ServiceUnavailable              => 'Net::OpenAPI::Exceptions::HTTP::ServiceUnavailable',
    TemporaryRedirect               => 'Net::OpenAPI::Exceptions::HTTP::TemporaryRedirect',
    TooManyRequests                 => 'Net::OpenAPI::Exceptions::HTTP::TooManyRequests',
    Unauthorized                    => 'Net::OpenAPI::Exceptions::HTTP::Unauthorized',
    UnavailableForLegalReasons      => 'Net::OpenAPI::Exceptions::HTTP::UnavailableForLegalReasons',
    UnprocessableEntity             => 'Net::OpenAPI::Exceptions::HTTP::UnprocessableEntity',
    UnsupportedMediaType            => 'Net::OpenAPI::Exceptions::HTTP::UnsupportedMediaType',
    UpgradeRequired                 => 'Net::OpenAPI::Exceptions::HTTP::UpgradeRequired',
    UseProxy                        => 'Net::OpenAPI::Exceptions::HTTP::UseProxy',
    VariantAlsoNegotiates           => 'Net::OpenAPI::Exceptions::HTTP::VariantAlsoNegotiates'
);

sub throw {
    my ( $exception, $message ) = @_;
    $message //= 'No additional information';

    my $class;
    if ( $exception =~ /^\d\d\d$/a ) {
        $class = $EXCEPTION_FOR_CODE{$exception};
    }
    else {
        $class = $EXCEPTION_FOR_SHORT_NAME{$exception};
    }
    unless ($class) {
        croak("I don't know how to throw this exception: $exception ($message)");
    }
    $class->throw($message);
}

1;

__END__

=head1 SYNOPSIS

    use Net::OpenAPI::Exceptions qw(throw);

    throw( 500           => 'I messed up!' );
    throw( NotAcceptable => 'You messed up!' );
    throw(404);    # message is always optional

=head1 DESCRIPTION

This module provides one function, C<throw> to throw simple HTTP exceptions.

You pass C<throw> either a three-digit error code or a "short name" of the
exception.  An optional (but recommended) message may be passed as the second
argument.

Exceptions thrown are C<Net::OpenAPI::Exceptions::Base> exceptions.

=head1 SHORT NAMES

The following short names are provided.

=head2 C<MultipleChoices>

Code:            300
Description:     'Multiple Choices'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::MultipleChoices>

=head2 C<MovedPermanently>

Code:            301
Description:     'Moved Permanently'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::MovedPermanently>

=head2 C<Found>

Code:            302
Description:     'Found'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::Found>

=head2 C<SeeOther>

Code:            303
Description:     'See Other'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::SeeOther>

=head2 C<NotModified>

Code:            304
Description:     'Not Modified'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::NotModified>

=head2 C<UseProxy>

Code:            305
Description:     'Use Proxy'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::UseProxy>

=head2 C<TemporaryRedirect>

Code:            307
Description:     'Temporary Redirect'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::TemporaryRedirect>

=head2 C<PermanentRedirect>

Code:            308
Description:     'Permanent Redirect'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::PermanentRedirect>

=head2 C<BadRequest>

Code:            400
Description:     'Bad Request'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::BadRequest>

=head2 C<Unauthorized>

Code:            401
Description:     'Unauthorized'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::Unauthorized>

=head2 C<PaymentRequired>

Code:            402
Description:     'Payment Required'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::PaymentRequired>

=head2 C<Forbidden>

Code:            403
Description:     'Forbidden'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::Forbidden>

=head2 C<NotFound>

Code:            404
Description:     'Not Found'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::NotFound>

=head2 C<MethodNotAllowed>

Code:            405
Description:     'Method Not Allowed'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::MethodNotAllowed>

=head2 C<NotAcceptable>

Code:            406
Description:     'Not Acceptable'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::NotAcceptable>

=head2 C<ProxyAuthenticationRequired>

Code:            407
Description:     'Proxy Authentication Required'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::ProxyAuthenticationRequired>

=head2 C<RequestTimeout>

Code:            408
Description:     'Request Timeout'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::RequestTimeout>

=head2 C<Conflict>

Code:            409
Description:     'Conflict'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::Conflict>

=head2 C<Gone>

Code:            410
Description:     'Gone'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::Gone>

=head2 C<LengthRequired>

Code:            411
Description:     'Length Required'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::LengthRequired>

=head2 C<PreconditionFailed>

Code:            412
Description:     'Precondition Failed'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::PreconditionFailed>

=head2 C<PayloadTooLarge>

Code:            413
Description:     'Payload Too Large'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::PayloadTooLarge>

=head2 C<RequestURITooLong>

Code:            414
Description:     'Request-URI Too Long'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::RequestURITooLong>

=head2 C<UnsupportedMediaType>

Code:            415
Description:     'Unsupported Media Type'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::UnsupportedMediaType>

=head2 C<RequestedRangeNotSatisfiable>

Code:            416
Description:     'Requested Range Not Satisfiable'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::RequestedRangeNotSatisfiable>

=head2 C<ExpectationFailed>

Code:            417
Description:     'Expectation Failed'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::ExpectationFailed>

=head2 C<MisdirectedRequest>

Code:            421
Description:     'Misdirected Request'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::MisdirectedRequest>

=head2 C<UnprocessableEntity>

Code:            422
Description:     'Unprocessable Entity'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::UnprocessableEntity>

=head2 C<Locked>

Code:            423
Description:     'Locked'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::Locked>

=head2 C<FailedDependency>

Code:            424
Description:     'Failed Dependency'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::FailedDependency>

=head2 C<UpgradeRequired>

Code:            426
Description:     'Upgrade Required'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::UpgradeRequired>

=head2 C<PreconditionRequired>

Code:            428
Description:     'Precondition Required'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::PreconditionRequired>

=head2 C<TooManyRequests>

Code:            429
Description:     'Too Many Requests'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::TooManyRequests>

=head2 C<RequestHeaderFieldsTooLarge>

Code:            431
Description:     'Request Header Fields Too Large'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::RequestHeaderFieldsTooLarge>

=head2 C<ConnectionClosedWithoutResponse>

Code:            444
Description:     'Connection Closed Without Response'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::ConnectionClosedWithoutResponse>

=head2 C<UnavailableForLegalReasons>

Code:            451
Description:     'Unavailable For Legal Reasons'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::UnavailableForLegalReasons>

=head2 C<ClientClosedRequest>

Code:            499
Description:     'Client Closed Request'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::ClientClosedRequest>

=head2 C<InternalServerError>

Code:            500
Description:     'Internal Server Error'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::InternalServerError>

=head2 C<NotImplemented>

Code:            501
Description:     'Not Implemented'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::NotImplemented>

=head2 C<BadGateway>

Code:            502
Description:     'Bad Gateway'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::BadGateway>

=head2 C<ServiceUnavailable>

Code:            503
Description:     'Service Unavailable'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::ServiceUnavailable>

=head2 C<GatewayTimeout>

Code:            504
Description:     'Gateway Timeout'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::GatewayTimeout>

=head2 C<HTTPVersionNotSupported>

Code:            505
Description:     'HTTP Version Not Supported'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::HTTPVersionNotSupported>

=head2 C<VariantAlsoNegotiates>

Code:            506
Description:     'Variant Also Negotiates'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::VariantAlsoNegotiates>

=head2 C<InsufficientStorage>

Code:            507
Description:     'Insufficient Storage'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::InsufficientStorage>

=head2 C<LoopDetected>

Code:            508
Description:     'Loop Detected'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::LoopDetected>

=head2 C<NotExtended>

Code:            510
Description:     'Not Extended'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::NotExtended>

=head2 C<NetworkAuthenticationRequired>

Code:            511
Description:     'Network Authentication Required'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::NetworkAuthenticationRequired>

=head2 C<NetworkConnectTimeoutError>

Code:            599
Description:     'Network Connect Timeout Error'
Exception Class: L<Net::OpenAPI::Exceptions::HTTP::NetworkConnectTimeoutError>

